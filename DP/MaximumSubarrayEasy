53. Maximum Subarray
Easy

6354

273

Add to List

Share
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


class Solution {
    //   [-2, 1, -3, 4,-1, 2, 1,-5, 4]
    //dp [-2, 1, -2, 4, 3, 5, 6, -1, 3] 
    //转移方程：dp[i] = dp[i - 1] > 0 ? dp[i - 1] + a[i] : a[i] //
    
    
            //最精练写法：
    public int maxSubArray(int[] nums) {
        int maxSum = Integer.MIN_VALUE, tmp = 0; //如果设成Integer.MIN_VALUE, [1] 就会返回成Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            tmp = Math.max(tmp + nums[i], nums[i]);
            maxSum = Math.max(maxSum,tmp);
        }
        return maxSum;
    }
    
    
    
     public int maxSubArray1(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        int maxSum = Integer.MIN_VALUE; //如果设成Integer.MIN_VALUE, [1] 就会返回成Integer.MIN_VALUE;
        int tmpSum = 0;//求Sum,所以开始值设置为0；
        for (int i = 0; i < n; i++) {
            tmpSum = Math.max(tmpSum + nums[i], nums[i]);
            maxSum = Math.max(maxSum,tmpSum);
        }
        return maxSum;
    }
    
    public int maxSubArray2(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        int maxSum = nums[0]; //如果设成Integer.MIN_VALUE, [1] 就会返回成Integer.MIN_VALUE;
        int tmpSum = nums[0];
        for (int i = 1; i < n; i++) {
            tmpSum = Math.max(tmpSum + nums[i], nums[i]);
            maxSum = Math.max(maxSum,tmpSum);
        }
        return maxSum;
    }

    public int maxSubArray4(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int n = nums.length;
        int[] dp = new int[n + 1];
        int maxSum = Integer.MIN_VALUE;
        dp[0] = 0;
        for (int i = 0; i < nums.length; i++) {
            dp[i + 1] = Math.max(dp[i] + nums[i], nums[i]);
            maxSum = Math.max(maxSum, dp[i + 1]);
        }
        return maxSum;
    }
}
