/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int count = 0;
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode res = lca(root, p, q);
        return count == 2 ? res : null;
    }
    private TreeNode lca(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return null;
        }
        TreeNode leftSearchNode = lca(root.left, p, q);
        TreeNode rightSearchNode = lca(root.right, p, q);
// 如果当前树根就是p或q，那计数加1，并且root就是lca（在p和q都存在于树的情况下)这里是or,就是可能count=1;
        if (root.val == p.val || root.val == q.val) {
            count++;
            return root;
        }
        if (leftSearchNode == null) {
            return rightSearchNode;
        } else if (rightSearchNode == null) {
            return leftSearchNode;
        } else {
            return root;
        }

    }
}
