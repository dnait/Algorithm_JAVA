class Solution {
    public int minMeetingRooms(int[][] intervals) {
        if (intervals.length == 0) return 0;
        
        Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));

        PriorityQueue<Integer> endsMinHeap = new PriorityQueue<Integer>();
        endsMinHeap.offer(intervals[0][1]);
        for (int i = 1; i < intervals.length; i++) {
            if (intervals[i][0] >= endsMinHeap.peek()) { // no overlap, then should update smallest end.
                endsMinHeap.poll();
            } 
            endsMinHeap.offer(intervals[i][1]);
        }
        return endsMinHeap.size();
    }
}
