class Solution {
    public void solveSudoku(char[][] board) {
        if (board == null || board.length < 9 || board[0].length < 9) {
            return;
        }
        dfs(board);
     }
     private boolean dfs(char[][] board) {
         for (int i = 0; i < board.length; i++) {
             for (int j = 0; j < board[0].length; j++) {
                 if (board[i][j] == '.') {
                     //try 1 - 9å
                     for (char num = '1'; num <= '9'; num++) {
                         if (isValid(board, i, j, num)) {
                             board[i][j] = num;
                             if (dfs(board)) {
                                 return true;
                             } else {
                                 board[i][j] = '.';
                             }
                         }
                     }
                    // 如果对一个格子尝试0-9都不行，说明整个sudoku无解，返回false;
                    return false;
                             
                 }
             }
         }
          return true; //整个棋盘'.'都填完了，就可以返回true;
     }
     private boolean isValid(char[][] board, int i, int j, char c) {
         for (int row = 0; row < 9; row++) {
             if (board[row][j] == c) {
                 return false;
             }
         }
         for (int col = 0; col < 9; col++) {
             if (board[i][col] == c) {
                 return false;
             }
         }
         //check cube
         int rIdx = i / 3 * 3;
         int cIdx = j / 3 * 3;
         for (int row = rIdx; row < rIdx + 3; row++) {
             for (int col = cIdx; col < cIdx + 3; col++) {
                 if (board[row][col] == c) {
                     return false;
                 }
             }
         }
         return true;
     }                      
}
