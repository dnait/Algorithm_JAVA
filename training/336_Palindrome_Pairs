class Solution {
public List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> ret = new ArrayList<>(); 
    if (words == null || words.length < 2) return ret;
    Map<String, Integer> map = new HashMap<String, Integer>();
    for (int i=0; i<words.length; i++) map.put(words[i], i);
    for (int i=0; i<words.length; i++) {
        // System.out.println(words[i]);
        for (int j=0; j<=words[i].length(); j++) { // notice it should be "j <= words[i].length()"
            String str1 = words[i].substring(0, j);
            String str2 = words[i].substring(j);
            if (isPalindrome(str1)) {
                String str2rvs = new StringBuilder(str2).reverse().toString();
                if (map.containsKey(str2rvs) && map.get(str2rvs) != i) {
                    List<Integer> list = new ArrayList<Integer>();
                    list.add(map.get(str2rvs));
                    list.add(i);
                    ret.add(list);
                    // System.out.printf("isPal(str1): %s\n", list.toString());
                }
            }
            if (isPalindrome(str2)) {
                String str1rvs = new StringBuilder(str1).reverse().toString();
                // check "str.length() != 0" to avoid duplicates
                if (map.containsKey(str1rvs) && map.get(str1rvs) != i && str2.length()!=0) { 
                    List<Integer> list = new ArrayList<Integer>();
                    list.add(i);
                    list.add(map.get(str1rvs));
                    ret.add(list);
                    // System.out.printf("isPal(str2): %s\n", list.toString());
                }
            }
        }
    }
    return ret;
}

private boolean isPalindrome(String str) {
    int left = 0;
    int right = str.length() - 1;
    while (left <= right) {
        if (str.charAt(left++) !=  str.charAt(right--)) return false;
    }
    return true;
}
}

class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        HashMap<String, Integer> map = new HashMap<String,Integer>();
        List<List<Integer>> ret = new LinkedList<List<Integer>>();
        
        for(int i = 0;i<words.length;i++)
        {
            map.put(words[i],i); // map words and its index in array.
        }
        
        for(int i = 0;i<words.length;i++) 
        {
            String rvrs = new StringBuilder(words[i]).reverse().toString(); 
            int len = words[i].length();
            // reverse the word and check if the reversed word has any substring in the map.
            int l = 0;
            int r = 0;             
            while(l<=r)
            {
                String sub = rvrs.substring(l,r);
                Integer j = map.get(sub);
                if(j!=null && j!=i)
                {       
                    if(l==0 && isPali(rvrs.substring(r,len))) 
                    {
                        Integer [] tmp = new Integer[]{j,i};
                        ret.add(Arrays.asList(tmp));
                    }
                    else if(r == len&&isPali(rvrs.substring(0,l)))
                    {
                        Integer [] tmp = new Integer[]{i,j};
                        ret.add(Arrays.asList(tmp)); 
                    }
                }
                if(r<len) r++;
                else l++;
            }
        }
        return ret;
    
    }
    
    public static boolean isPali(String s)
    {
        char[] SA = s.toCharArray();
        for(int k = 0;k<SA.length/2;k++)
        {
            if(SA[k]!=SA[SA.length-1-k]) return false;
                
        }
        return true;
    }
}
