class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<List<String>>();
        dfs(res, s, 0, new ArrayList<>());
        return res;
    }
    private void dfs(List<List<String>> res, String s, int start, List<String> path) {
        if (start == s.length()) {
            res.add(new ArrayList<>(path));
        }
        for (int i = start; i < s.length(); i++) {
            String tmp = s.substring(start, i + 1);

            if (isPal(tmp)) {
                path.add(tmp);
                dfs(res, s, i + 1, path);
                path.remove(path.size() - 1);
            }
        }
    }
    private boolean isPal(String s) {
        if (s == null || s.trim().length() == 0) return false;
        int left = 0;
        int right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left++) != s.charAt(right--)) {
                return false;
            }
        }
        return true;
    }
}
